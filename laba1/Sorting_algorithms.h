#pragma once
class Sorting_algorithms // WARNING!! God Object!!
{

public:


	// Конструткор класса
	Sorting_algorithms() {
		Dialog_Loop();
	}

	// Деструктор класса для очистки массива
	~Sorting_algorithms();

private:
	
	int Num_C = 0;  // Количество сравнений
	int Num_M = 0;	// Количество пересылок
	// Указатель на массив, который мы будем заполнять и сортировать.
	int* Array_to_Sort;

	// Целочисленное на ввод, которое будет определять длинну массива
	int Array_Size;

	// Функция для непрерывного выполнения программы
	void Dialog_Loop();

	// Функция консольного диалога с пользователем, 
	// из которой вызвывются функции с алгоритмами по сортировке массива.
	void Console_User_Dialog();
		

	// Функция заполнения массива убывающей последовательностю
	void Descreasing_Fillage_of_Array();

	// Функция случайного заполнения массива
	void Random_Fillage_of_Array();		

	// Функция заполнения возрастающей последовательностью
	void Increasing_Fillage_of_Array();	

	// Функция для перемены мест двух элементов в массиве
	void Swap_method(int, int);


	// Функция сортировки выбором
	void Selection_Sort();				

	// Фунуция сортировки методом Шелла
	void Shell_Sort();					

	// Функция пирамидальной сортировки
	void HeapSort();

	// Подсчет контрольной суммы массива
	int Control_Sum();

	// Подсчет количества серий в массиве
	int Series();

	// Принимает функцию сортировки как аргумент и выводит время её выполнения
	// Можно модернизировать в int Benchmark() при желании/необходимости
	void Benchmark(void (Sorting_algorithms::*)());

	// Вывод массива на экран в виде матрицы 10хN(
	void Print_Array();

};

